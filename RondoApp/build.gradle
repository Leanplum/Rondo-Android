apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.huawei.agconnect'

def LEANPLUM_SDK_VERSION = System.getenv("LEANPLUM_SDK_VERSION") ?: "7.0.0-beta2"

ext {
    KEYSTORE_PATH_PROP = 'storeFilePath'
    KEYSTORE_PASSWORD_PROP = 'storePassword'
    KEYSTORE_KEYALIAS_PROP = 'keyAlias'
    KEYSTORE_KEYPASS_PROP = 'keyPassword'
}

def signingProperties = getSigningProperties()

android {

    compileSdkVersion 31
    defaultConfig {
        applicationId "com.leanplum.rondo"
        minSdkVersion 19 // Xiaomi SDK 5.0.6 needs 19
        targetSdkVersion 31
        versionCode
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    if (signingProperties.containsKey(KEYSTORE_PATH_PROP)) {
        signingConfigs {
            release {
                storeFile file(signingProperties[KEYSTORE_PATH_PROP])
                storePassword signingProperties[KEYSTORE_PASSWORD_PROP]
                keyAlias signingProperties[KEYSTORE_KEYALIAS_PROP]
                keyPassword signingProperties[KEYSTORE_KEYPASS_PROP]
            }
            debug {
                storeFile file(signingProperties[KEYSTORE_PATH_PROP])
                storePassword signingProperties[KEYSTORE_PASSWORD_PROP]
                keyAlias signingProperties[KEYSTORE_KEYALIAS_PROP]
                keyPassword signingProperties[KEYSTORE_KEYPASS_PROP]
            }
        }
    } else {
        println "Signing properties missing"
    }

    buildTypes {
        buildTypes.each {
            it.buildConfigField "String", "LEANPLUM_SDK_VERSION", "\"${LEANPLUM_SDK_VERSION}\""
        }
        release {
            if (signingProperties.containsKey(KEYSTORE_PATH_PROP)) {
                signingConfig signingConfigs.release
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "version"
    productFlavors {
        prod {
            dimension "version"
        }
        if (findProject(':AndroidSDK') != null) {
            dev {
                dimension "version"
                getIsDefault().set(true)
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

static def isHmsSupported(String version) {
    // HMS is supported from 5.9.0
    int startMajor = 5
    int startMinor = 9
    String major = version.split("\\.")[0]
    String minor = version.split("\\.")[1]
    return major.toInteger() > startMajor ||
            (major.toInteger() == startMajor && minor.toInteger() >= startMinor)
}

def getSigningProperties() {
    boolean isRunningOnTravis = System.getenv('CI') == 'true'
    if (isRunningOnTravis) {
        println 'Using Travis CI for signing properties'
        Properties properties = new Properties()
        properties.put(KEYSTORE_PATH_PROP, '../keystore/signingkey.jks')
        properties.put(KEYSTORE_PASSWORD_PROP, System.getenv('keystore_password'))
        properties.put(KEYSTORE_KEYALIAS_PROP, System.getenv('keystore_alias'))
        properties.put(KEYSTORE_KEYPASS_PROP, System.getenv('keystore_alias_password'))
        return properties
    } else if (!project.rootProject.file('local.properties').exists()) {
        println 'local.properties file is missing'
        return new Properties()
    } else {
        println 'Using local.properties for signing properties'
        InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
        Properties properties = new Properties()
        properties.load(inputStream)
        return properties
    }
}

dependencies {

    //External Dependencies
    implementation "com.google.android.gms:play-services-location:17.0.0"
    implementation 'com.google.firebase:firebase-messaging:20.3.0' // for FCM

    // CleverTap
    // implementation 'com.google.android.gms:play-services-base:18.1.0'
    // implementation 'com.android.installreferrer:installreferrer:2.2'
    implementation "com.clevertap.android:push-templates:1.0.3"
    // CleverTap Xiaomi SDK for both dev and prod flavors
    implementation "com.clevertap.android:clevertap-xiaomi-sdk:1.5.1"
    implementation files("libs/MiPush_SDK_Client_5_0_6-G_3rd.aar")

    // SDK from released packages (prod flavor)
    prodImplementation "com.leanplum:leanplum-core:${LEANPLUM_SDK_VERSION}"
    prodImplementation "com.leanplum:leanplum-push:${LEANPLUM_SDK_VERSION}"
    prodImplementation "com.leanplum:leanplum-location:${LEANPLUM_SDK_VERSION}"
    prodImplementation "com.leanplum:leanplum-fcm:${LEANPLUM_SDK_VERSION}"
    if (isHmsSupported(LEANPLUM_SDK_VERSION)) {
        println "adding leanplum-hms dependency"
        prodImplementation "com.leanplum:leanplum-hms:${LEANPLUM_SDK_VERSION}"
    }

    // SDK from source (dev flavor)
    if (findProject(':AndroidSDK') != null) {
        devImplementation project(':AndroidSDKCore')
        devImplementation project(':AndroidSDKPush')
        devImplementation project(':AndroidSDKLocation')
        devImplementation project(':AndroidSDKFcm')
        if (findProject(':AndroidSDKHms') != null) {
            devImplementation project(':AndroidSDKHms')
        }
    }



    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'com.google.android.gms:play-services-places:17.0.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // Google library for app rating
    implementation 'com.google.android.play:core:1.8.2'
    // Library for scanning QR codes. Do not use latest version as it bumps minSDK.
    implementation 'com.journeyapps:zxing-android-embedded:3.6.0'
    // Json canonicalization for Variable Signing
    implementation 'io.github.erdtman:java-json-canonicalization:1.1'
}
